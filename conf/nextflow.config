profiles {
    
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 32
        executor.memory         = 8.GB
    }
    test                         { includeConfig 'conf/test.config'                         }
    test_full                    { includeConfig 'conf/test_full.config'                    }
    test_minimap2                { includeConfig 'conf/test_minimap2.config'                }
    test_minimap2_map_entrypoint { includeConfig 'conf/test_minimap2_map_entrypoint.config' }
    test_ultra_map_entrypoint    { includeConfig 'conf/test_ultra_map_entrypoint.config'    }

}



/*
================================================================================

Here add SLURM info 

================================================================================
*/



manifest {
  description = 'Running Nextflow script' 
  author = 'nfn'
  nextflowVersion = '>=22.10.0'
}

executor.cpus=32


report.overwrite = true

params.allelefinder_path = "/scratch/nadjafn/AlleleFinder"
params.mcscanx_path = "/scratch/nadjafn/MCScanX"
params.outdir = "/scratch/nadjafn/potato-allelic-orthogroups/results"
// Process configuration
process {

    withName: AGAT_spKeepLongestIsoform {
        publishDir = [
            path: { "${params.outdir}/0_LongestIsofrom" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: GFFREAD_PROT {
        publishDir = [
            path: { "${params.outdir}/01_PROTEOME" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
            ext.args = '-v -E -y -S'
    }

    withName: GFFREAD_BED {
        publishDir = [
            path: { "${params.outdir}/02_BED" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
            ext.args = '-v -E --bed'
    }

    withName: GENESPACE_PARSE {
        publishDir = [
            path: { "${params.outdir}/03_GENESPACE" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
            ext.args = ''
    }

    withName: GFFREAD_CDS {
        publishDir = [
            path: { "${params.outdir}/04_CDS" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }]
            ext.args = '-v -E -x'
    }


    }

    